// Subroutine to try to prevent bots from getting stuck
// There is 2 parts, one from 3 to 5 seconds, and the second part to 7 to 15 seconds.
selector
{
	decorator return( STATUS_FAILURE )
	{
		// protect bots that are repairing from being considered stuck
		sequence
		{
			condition haveWeapon( WP_HBUILD ) && distanceTo( E_GOAL ) <= 100 && percentHealth( E_GOAL ) < 1.0
			action resetStuckTime
		}
	}

condition(stuckTime > 7000)
{
	selector
	{
		condition(stuckTime > 15000)
		{
			action suicide
		}
		
		decorator timer(3000)
		{
			decorator return(STATUS_FAILURE)
			{
				action jump
			}
		}
		condition(stuckTime > 12700)
		{
			sequence
				{
				// action say("Last ROAM", SAY_ALL)
				action roam
				}
		}
		
		condition(stuckTime > 12500)
		{
			action moveInDir(MOVE_FORWARD)
		}
		condition(stuckTime > 10000)
		{
			action moveInDir(MOVE_RIGHT)
		}
		condition(stuckTime > 9000)
		{
			action moveInDir(MOVE_BACKWARD)
		}
		condition(stuckTime > 7900)
		{
			sequence
				{
				// action say("PreLast ROAM", SAY_ALL)
				action roam
				}
		}
			condition(stuckTime > 7700)
			{
				sequence
				{
				//	action say("stucktime 23 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}	
			
			condition(stuckTime > 7500)
			{
				sequence
				{
				//	action say("stucktime 22 FORWARD", SAY_ALL)
					action moveInDir(MOVE_FORWARD)
				}
			}			
			condition(stuckTime > 7400)
			{
				sequence
				{
				//	action say("stucktime 21 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			
			
			condition(stuckTime > 7300)
			{
				sequence
				{
				//	action say("stucktime 20 BACK", SAY_ALL)
					action moveInDir(MOVE_BACKWARD)
				}
			}
			condition(stuckTime > 7200)
			{
				sequence
				{
				//	action say("stucktime 19 RIGHT", SAY_ALL)
					action moveInDir(MOVE_RIGHT)
				}
			}
		
		
		sequence
		{
		//	action say("STUCK", SAY_ALL)
			action moveInDir(MOVE_LEFT)
			action moveTo(E_SELF) // cancel old target which may be causing the bot to walk into a wall, etc.
		}
	}
}


// This is the quick unstuck start at 3 seconds to 5 seconds, without suicide
	condition(stuckTime > 3000)
	{
		selector
		{
			condition(stuckTime > 5000)
			{
				sequence
				{
				//	action say("Long stuck", SAY_ALL)
					action roam // May be should be the old objective, but don't know how to do.
				}
			}

			// Not same values, shorter timer
			decorator timer(1500)
			{
				decorator return(STATUS_FAILURE)
				{
					sequence
					{
					//	 action say("stucktime JUMP short", SAY_ALL)
						action jump
					}
				}
			}
		

			condition(stuckTime > 4600)
			{
				sequence
				{
				//	action say("stucktime 17 RIGHT", SAY_ALL)
					action moveInDir(MOVE_RIGHT)
				}
			}
			condition(stuckTime > 4500)
			{
				sequence
				{
				//	action say("stucktime 16 FORWARD", SAY_ALL)
					action moveInDir(MOVE_FORWARD)
				}
			}
			condition(stuckTime > 4400)
			{
				sequence
				{
				//	action say("stucktime 15 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			
			condition(stuckTime > 4300)
			{
				sequence
				{
				//	action say("stucktime 14 FORWARD", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			
			condition(stuckTime > 4200)
			{
				sequence
				{
				//	action say("stucktime 13 RIGHT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			condition(stuckTime > 4200)
			{
				sequence
				{
				//	action say("stucktime 12 BACKWARD", SAY_ALL)
					action moveInDir(MOVE_BACKWARD)
				}
			}
			condition(stuckTime > 4100)
			{
				sequence
				{
				//	action say("stucktime 11 FORWARD", SAY_ALL)
					action moveInDir(MOVE_FORWARD)
				}
			}
			condition(stuckTime > 4000)
			{
				sequence
				{
				//	action say("stucktime 10 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			condition(stuckTime > 3900)
			{
				sequence
				{
				//	action say("stucktime 9 FORWARD", SAY_ALL)
					action moveInDir(MOVE_FORWARD)
				}
			}
			condition(stuckTime > 3800)
			{
				sequence
				{
				//	action say("stucktime 8 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			
			
			condition(stuckTime > 3700)
			{
				sequence
				{
				//	action say("stucktime 7 BACKWARD", SAY_ALL)
					action moveInDir(MOVE_BACKWARD)
				}
			}
			condition(stuckTime > 3600)
			{
				sequence
				{
				//	action say("stucktime 6 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}

			
			condition(stuckTime > 3500)
			{
				sequence
				{
				//	action say("stucktime 5 FORWARD", SAY_ALL)
					action moveInDir(MOVE_FORWARD)
				}
			}			
			condition(stuckTime > 3400)
			{
				sequence
				{
				//	action say("stucktime 4 LEFT", SAY_ALL)
					action moveInDir(MOVE_LEFT)
				}
			}
			
			
			condition(stuckTime > 3300)
			{
				sequence
				{
				//	action say("stucktime 3 BACK", SAY_ALL)
					action moveInDir(MOVE_BACKWARD)
				}
			}
			condition(stuckTime > 3200)
			{
				sequence
				{
				//	action say("stucktime 2 RIGHT", SAY_ALL)
					action moveInDir(MOVE_RIGHT)
				}
			}
			
			condition(stuckTime > 3100)
			{
				sequence
				{
				//	action say("stucktime 1 BACK", SAY_ALL)
					action moveInDir(MOVE_BACKWARD)
				}
			}
			sequence
			{
				// action say("stucktime seq + JUMP + RIGHT", SAY_ALL)
				action jump
				action moveInDir(MOVE_RIGHT)
				action moveTo(E_SELF) // cancel old target which may be causing the bot to walk into a wall, etc.
			}
		}
	}
}
